# handlers/admin.py

from aiogram import Router, F, Bot
from aiogram.filters import Command, Filter
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, func
from datetime import datetime
from database import async_session
from models import Commission, PaymentDetails, AdminActionLog, Application, User
from config import ADMIN_IDS, BOT_TOKEN
import re  # –î–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π

admin_router = Router()

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –§–∏–ª—å—Ç—Ä–æ–≤ ---

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class IsAdminMessageFilter(Filter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in ADMIN_IDS

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ CallbackQuery –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class IsAdminCallbackQueryFilter(Filter):
    async def __call__(self, callback_query: CallbackQuery) -> bool:
        return callback_query.from_user.id in ADMIN_IDS

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –°–æ—Å—Ç–æ—è–Ω–∏–π ---

class AdminStates(StatesGroup):
    MainMenu = State()
    SetCommission = State()
    AddPaymentDetails = State()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –°–æ–∑–¥–∞–Ω–∏—è Inline –ö–ª–∞–≤–∏–∞—Ç—É—Ä ---

def admin_main_menu_kb():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é", callback_data="admin_set_commission")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="admin_add_payment")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="admin_delete_payment")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_statistics")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_view_blocked_users")],
    ])
    return keyboard

def admin_cancel_kb(action: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_cancel_{action}")]
    ])

def admin_delete_payment_kb(payment_details):
    buttons = [
        [
            InlineKeyboardButton(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å: {detail.bank_name}, {detail.card_number}, {detail.recipient_name}",
                callback_data=f"delete_payment_{detail.id}"
            )
        ] for detail in payment_details
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def stats_back_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main_menu")]
    ])

def blocked_users_back_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main_menu")]
    ])

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /admin
@admin_router.message(Command("admin"), IsAdminMessageFilter())
async def admin_start(message: Message, state: FSMContext):
    await state.set_state(AdminStates.MainMenu)
    await message.answer("üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=admin_main_menu_kb())
    await log_admin_action(message.from_user.id, "–û—Ç–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
@admin_router.callback_query(F.data.startswith("admin_"), IsAdminCallbackQueryFilter())
async def admin_menu_handler(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data

    if data == "admin_set_commission":
        await state.set_state(AdminStates.SetCommission)
        await callback_query.message.edit_text(
            "üõ† **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∏—Å—Å–∏—é –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, `2.5`):",
            reply_markup=admin_cancel_kb("set_commission"),
            parse_mode="Markdown"
        )
        await callback_query.answer()
        await log_admin_action(callback_query.from_user.id, "–ù–∞—á–∞—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏")

    elif data == "admin_add_payment":
        await state.set_state(AdminStates.AddPaymentDetails)
        await callback_query.message.edit_text(
            "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤**\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "–ë–∞–Ω–∫\n"
            "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n"
            "–§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n\n"
            "üîç **–ü—Ä–∏–º–µ—Ä:**\n"
            "–ë–∞–Ω–∫ –ê\n"
            "1234567890123456\n"
            "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –°",
            reply_markup=admin_cancel_kb("add_payment"),
            parse_mode="Markdown"
        )
        await callback_query.answer()
        await log_admin_action(callback_query.from_user.id, "–ù–∞—á–∞—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤")

    elif data == "admin_delete_payment":
        await delete_payment_details_menu(callback_query, state)
        await callback_query.answer()

    elif data == "admin_statistics":
        await show_statistics(callback_query, state)
        await callback_query.answer()

    elif data == "admin_view_blocked_users":
        await view_blocked_users(callback_query, state)
        await callback_query.answer()

    elif data.startswith("admin_cancel_"):
        action = data.split("_", 2)[-1]
        await state.set_state(AdminStates.MainMenu)
        await callback_query.message.edit_text("‚ùå **–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_main_menu_kb(), parse_mode="Markdown")
        await callback_query.answer()
        await log_admin_action(callback_query.from_user.id, f"–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è: {action}")

    elif data == "admin_back_main_menu":
        await state.set_state(AdminStates.MainMenu)
        await callback_query.message.edit_text("üóÇ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**", reply_markup=admin_main_menu_kb(), parse_mode="Markdown")
        await callback_query.answer()
        await log_admin_action(callback_query.from_user.id, "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    else:
        await callback_query.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏
@admin_router.message(AdminStates.SetCommission, IsAdminMessageFilter())
async def set_commission(message: Message, state: FSMContext):
    try:
        new_rate = float(message.text)
        if new_rate < 0:
            raise ValueError("–ö–æ–º–∏—Å—Å–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
        async with async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –∫–æ–º–∏—Å—Å–∏–∏
            result = await session.execute(select(Commission).order_by(Commission.id.desc()))
            commission = result.scalar_one_or_none()
            if not commission:
                # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                commission = Commission(rate=new_rate)
                session.add(commission)
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                commission.rate = new_rate
                commission.updated_at = datetime.utcnow()
            await session.commit()
            await message.answer(f"‚úÖ –ù–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: `{new_rate}%`", parse_mode="Markdown")
            await log_admin_action(message.from_user.id, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è: {new_rate}%")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏.")
        return
    except Exception:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∏—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.set_state(AdminStates.MainMenu)
        await message.answer("üóÇ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**", reply_markup=admin_main_menu_kb(), parse_mode="Markdown")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
@admin_router.message(AdminStates.AddPaymentDetails, IsAdminMessageFilter())
async def add_payment_details(message: Message, state: FSMContext):
    content = message.text.strip()
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = content.split('\n')
        if len(lines) != 3:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "–ë–∞–Ω–∫\n"
                "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n"
                "–§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n\n"
                "üîç **–ü—Ä–∏–º–µ—Ä:**\n"
                "–ë–∞–Ω–∫ –ê\n"
                "1234567890123456\n"
                "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –°",
                parse_mode="Markdown"
            )
            return

        bank_name = lines[0].strip()
        card_number = lines[1].strip().replace(' ', '')  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
        recipient_name = lines[2].strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã (–ø—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏–Ω—ã)
        if not re.fullmatch(r'\d{16}', card_number):
            await message.answer("‚ùå –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 16 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
            existing = await session.execute(
                select(PaymentDetails).where(PaymentDetails.card_number == card_number)
            )
            existing_payment = existing.scalar_one_or_none()
            if existing_payment:
                await message.answer("‚ùå –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –∫–∞—Ä—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
                return

            payment_detail = PaymentDetails(
                bank_name=bank_name,
                card_number=card_number,
                recipient_name=recipient_name
                # min_limit –∏ max_limit —É–¥–∞–ª–µ–Ω—ã
            )
            session.add(payment_detail)
            await session.commit()
            await message.answer("‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", parse_mode="Markdown")
            await log_admin_action(
                message.from_user.id,
                f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {bank_name}, {card_number}, –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {recipient_name}"
            )

    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
            "üîç **–ü—Ä–∏–º–µ—Ä:**\n"
            "–ë–∞–Ω–∫ –ê\n"
            "1234567890123456\n"
            "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –°",
            parse_mode="Markdown"
        )
        return
    except Exception:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="Markdown")
    finally:
        await state.set_state(AdminStates.MainMenu)
        await message.answer("üóÇ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**", reply_markup=admin_main_menu_kb(), parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
async def delete_payment_details_menu(callback_query: CallbackQuery, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(select(PaymentDetails))
        payment_details = result.scalars().all()
        if not payment_details:
            await callback_query.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=admin_main_menu_kb(), parse_mode="Markdown")
            await state.set_state(AdminStates.MainMenu)
            await log_admin_action(callback_query.from_user.id, "–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤: —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return

        # –°–æ–∑–¥–∞—ë–º InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–£–¥–∞–ª–∏—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞
        inline_kb = admin_delete_payment_kb(payment_details)

        await callback_query.message.edit_text("üóë **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**", reply_markup=inline_kb, parse_mode="Markdown")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ Inline –∫–Ω–æ–ø–∫–∏
@admin_router.callback_query(F.data.startswith("delete_payment_"), IsAdminCallbackQueryFilter())
async def delete_payment_callback(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–µ–∫–≤–∏–∑–∏—Ç–∞
        detail_id = int(data.split("_")[-1])
    except ValueError:
        await callback_query.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–µ–∫–≤–∏–∑–∏—Ç–∞.", show_alert=True)
        return

    async with async_session() as session:
        result = await session.execute(select(PaymentDetails).where(PaymentDetails.id == detail_id))
        payment_detail = result.scalar_one_or_none()
        if payment_detail:
            await session.delete(payment_detail)
            await session.commit()
            await callback_query.answer("‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", show_alert=True)
            await log_admin_action(callback_query.from_user.id, f"–£–¥–∞–ª–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã ID: {detail_id}")
        else:
            await callback_query.answer("‚ùå –†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        remaining_details = await session.execute(select(PaymentDetails))
        remaining_details = remaining_details.scalars().all()

        if remaining_details:
            # –°–æ–∑–¥–∞—ë–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π InlineKeyboardMarkup
            updated_inline_kb = admin_delete_payment_kb(remaining_details)
            await callback_query.message.edit_text("üóë **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**", reply_markup=updated_inline_kb, parse_mode="Markdown")
        else:
            # –ï—Å–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –Ω–µ—Ç, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await callback_query.message.edit_text("‚úÖ –í—Å–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=admin_main_menu_kb(), parse_mode="Markdown")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@admin_router.callback_query(F.data == "admin_statistics", IsAdminCallbackQueryFilter())
async def show_statistics(callback_query: CallbackQuery, state: FSMContext):
    try:
        async with async_session() as session:
            # –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: —Å—É–º–º–∞ amount_rub –¥–ª—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            result = await session.execute(
                select(func.sum(Application.amount_rub)).where(Application.status == 'completed')
            )
            total_turnover = result.scalar() or 0.0

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–º–∏—Å—Å–∏–∏
            result = await session.execute(
                select(Commission.rate).order_by(Commission.id.desc()).limit(1)
            )
            latest_commission_rate = result.scalar() or 0.0

            # –ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –∫–æ–º–∏—Å—Å–∏–π
            total_commission = total_turnover * (latest_commission_rate / 100)

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = await session.execute(select(func.count(User.id)))
            user_count = result.scalar()

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
            result = await session.execute(select(func.count(Application.id)))
            total_applications = result.scalar()

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            result = await session.execute(
                select(Application.status, func.count(Application.id)).group_by(Application.status)
            )
            status_counts = result.fetchall()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞—è–≤–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_summary = ""
            for status, count in status_counts:
                status_summary += f"**{status.capitalize()}**: {count}\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_message = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:**\n\n"
                f"**üí∏ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç:** `{total_turnover:.2f} ‚ÇΩ`\n"
                f"**üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –∫–æ–º–∏—Å—Å–∏–π ({latest_commission_rate}%):** `{total_commission:.2f} ‚ÇΩ`\n"
                f"**üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** `{user_count}`\n"
                f"**üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫:** `{total_applications}`\n\n"
                f"**üìà –°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫:**\n{status_summary}"
            )

            await callback_query.message.edit_text(
                stats_message,
                parse_mode="Markdown",
                reply_markup=stats_back_kb()
            )
            await log_admin_action(callback_query.from_user.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    except Exception:
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=admin_main_menu_kb(),
            parse_mode="Markdown"
        )
        await callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", show_alert=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def view_blocked_users(callback_query: CallbackQuery, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(select(User).where(User.is_blocked == True))
        blocked_users = result.scalars().all()
        if not blocked_users:
            await callback_query.message.edit_text("‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=admin_main_menu_kb(), parse_mode="Markdown")
            await state.set_state(AdminStates.MainMenu)
            await log_admin_action(callback_query.from_user.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        blocked_list = ""
        for user in blocked_users:
            blocked_list += f"üîπ **ID:** `{user.id}` | **Telegram ID:** `{user.telegram_id}` | **–ò–º—è:** {user.first_name or user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"

        blocked_message = (
            f"üö´ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n\n"
            f"{blocked_list}\n"
            f"–ß—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            f"`/unban <telegram_id>`\n\n"
            f"üîô –ù–∞–∂–º–∏—Ç–µ **–ù–∞–∑–∞–¥**, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )

        await callback_query.message.edit_text(
            blocked_message,
            parse_mode="Markdown",
            reply_markup=blocked_users_back_kb()
        )
        await log_admin_action(callback_query.from_user.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@admin_router.callback_query(F.data == "admin_back_main_menu", IsAdminCallbackQueryFilter())
async def back_to_main_menu(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.MainMenu)
    await callback_query.message.edit_text("üóÇ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**", reply_markup=admin_main_menu_kb(), parse_mode="Markdown")
    await callback_query.answer()
    await log_admin_action(callback_query.from_user.id, "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /unban ID
@admin_router.message(Command("unban"), IsAdminMessageFilter())
async def unban_user(message: Message, state: FSMContext):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º telegram_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/unban <telegram_id>`", parse_mode="Markdown")
            return

        telegram_id = int(parts[1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/unban <telegram_id>`", parse_mode="Markdown")
        return

    async with async_session() as session:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID `{telegram_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="Markdown")
            return

        if not user.is_blocked:
            await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{telegram_id}` –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", parse_mode="Markdown")
            return

        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.is_blocked = False
        await session.commit()
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{telegram_id}` —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", parse_mode="Markdown")
        await log_admin_action(message.from_user.id, f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram ID: {telegram_id}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        bot = Bot(token=BOT_TOKEN)
        try:
            await bot.send_message(
                user.telegram_id,
                "‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.",
                parse_mode="Markdown"
            )
        except Exception:
            pass  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        finally:
            await bot.close()

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –î–µ–π—Å—Ç–≤–∏–π ---

async def log_admin_action(admin_id: int, action: str):
    async with async_session() as session:
        log_entry = AdminActionLog(
            admin_id=admin_id,
            action=action,
            timestamp=datetime.utcnow()
        )
        session.add(log_entry)
        await session.commit()
