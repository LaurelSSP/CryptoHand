# handlers/user.py

from aiogram import Router, F, Bot
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.filters import Command, BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, func
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
from database import async_session
from models import User, Commission, PaymentDetails, Application
from utils.captcha import generate_captcha, verify_captcha
from config import (
    CAPTCHA_TIMEOUT,
    COMMISSION_RATE,
    ADMIN_USERNAME,
    ADMIN_IDS,  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    WORKER_ID,
    BOT_TOKEN,
)
from utils.crypto_rate import get_crypto_rate
import re
from decimal import Decimal

user_router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–ø—á–∏ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
class CaptchaStates(StatesGroup):
    WaitingForCaptcha = State()
    MainMenu = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
class BuyCryptoStates(StatesGroup):
    ChooseCrypto = State()
    EnterAmount = State()
    ChoosePaymentMethod = State()
    EnterWalletAddress = State()
    ConfirmPayment = State()

# –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
class IsNotBlocked(BaseFilter):
    async def __call__(self, message: Message):
        telegram_id = message.from_user.id
        async with async_session() as session:
            result = await session.execute(
                select(User).where(User.telegram_id == telegram_id)
            )
            user = result.scalar_one_or_none()
            if user and user.is_blocked:
                await message.answer("‚õî –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
                return False
            return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Inline-–∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º callback_data
def cancel_inline_keyboard(callback_data: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data=callback_data)],
    ])
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def remove_buttons(bot: Bot, chat_id: int, message_id: int):
    try:
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async def delete_message(bot: Bot, chat_id: int, message_id: int):
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@user_router.message(Command('start'))
async def user_start(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    first_name = message.from_user.first_name
    username = message.from_user.username
    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        if not user:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user = User(telegram_id=telegram_id, first_name=first_name, username=username)
            session.add(user)
            try:
                await session.commit()
            except Exception:
                await session.rollback()
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
                return
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.first_name = first_name
            user.username = username
            try:
                await session.commit()
            except Exception:
                await session.rollback()
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
                return

        if user.is_blocked:
            await message.answer("‚õî –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return

        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±–º–µ–Ω–Ω–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!")

        now = datetime.utcnow()
        last_action = (
            user.last_action
            if user.last_action
            else now - timedelta(minutes=CAPTCHA_TIMEOUT + 1)
        )

        if now - last_action > timedelta(minutes=CAPTCHA_TIMEOUT):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ø—á—É
            captcha_code = await generate_captcha()
            user.captcha_code = captcha_code
            user.captcha_expiration = now + timedelta(minutes=CAPTCHA_TIMEOUT)
            try:
                await session.commit()
            except Exception:
                await session.rollback()
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
                return

            sent_message = await message.answer(
                f"üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n\n**{captcha_code}**",
                parse_mode="Markdown"
            )
            await state.update_data(last_message_id=sent_message.message_id)
            await state.set_state(CaptchaStates.WaitingForCaptcha)
        else:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            user.last_action = now
            try:
                await session.commit()
            except Exception:
                await session.rollback()
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
                return
            await main_menu(message, state)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ø—á–∏
@user_router.message(CaptchaStates.WaitingForCaptcha)
async def process_captcha(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    user_data = await state.get_data()
    last_message_id = user_data.get('last_message_id')

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if last_message_id:
        await remove_buttons(message.bot, message.chat.id, last_message_id)

    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

        if not user or not user.captcha_code:
            sent_message = await message.answer("‚ùå –ö–∞–ø—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.")
            await state.update_data(last_message_id=sent_message.message_id)
            return

        now = datetime.utcnow()

        if now > user.captcha_expiration:
            # –ö–∞–ø—á–∞ –∏—Å—Ç–µ–∫–ª–∞
            captcha_code = await generate_captcha()
            user.captcha_code = captcha_code
            user.captcha_expiration = now + timedelta(minutes=CAPTCHA_TIMEOUT)
            try:
                await session.commit()
            except Exception:
                await session.rollback()
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
                return

            sent_message = await message.answer(
                f"‚è∞ –ö–∞–ø—á–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞–ø—á—É:\n\n**{captcha_code}**",
                parse_mode="Markdown"
            )
            await state.update_data(last_message_id=sent_message.message_id)
            return

        if verify_captcha(message.text, user.captcha_code):
            # –ö–∞–ø—á–∞ –≤–µ—Ä–Ω–∞
            user.captcha_code = None
            user.captcha_expiration = None
            user.last_action = now
            try:
                await session.commit()
            except Exception:
                await session.rollback()
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
                return
            await message.answer("‚úÖ –ö–∞–ø—á–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤–µ—Ä–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.")
            await main_menu(message, state)
        else:
            sent_message = await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.update_data(last_message_id=sent_message.message_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu(message: Message, state: FSMContext):
    user_data = await state.get_data()
    last_message_id = user_data.get('last_message_id')

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    if last_message_id:
        await delete_message(message.bot, message.chat.id, last_message_id)

    await state.set_state(CaptchaStates.MainMenu)
    sent_message = await message.answer("üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_inline_keyboard())
    await state.update_data(last_message_id=sent_message.message_id)

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_inline_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", callback_data="menu_buy_crypto")],
        [InlineKeyboardButton(text="üìà –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑—å —Å –Ω–∞–º–∏", url=f"https://t.me/{ADMIN_USERNAME}")]
    ])
    return keyboard

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
@user_router.callback_query(CaptchaStates.MainMenu, IsNotBlocked())
async def main_menu_selection_callback(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data
    await callback_query.answer()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    user_data = await state.get_data()
    last_message_id = user_data.get('last_message_id')
    if last_message_id:
        await delete_message(callback_query.message.bot, callback_query.message.chat.id, last_message_id)

    if data == "menu_buy_crypto":
        await buy_crypto_start(callback_query.message, state)
    elif data == "menu_profile":
        await personal_account(callback_query.message, state)
    else:
        # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await main_menu(callback_query.message, state)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É"
async def buy_crypto_start(message: Message, state: FSMContext):
    await state.set_state(BuyCryptoStates.ChooseCrypto)
    sent_message = await message.answer("üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", reply_markup=crypto_inline_keyboard())
    await state.update_data(last_message_id=sent_message.message_id)

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
def crypto_inline_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Bitcoin (BTC)", callback_data="crypto_BTC")],
        [InlineKeyboardButton(text="Litecoin (LTC)", callback_data="crypto_LTC")]
    ])
    return keyboard

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
@user_router.callback_query(BuyCryptoStates.ChooseCrypto)
async def choose_crypto_callback(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data
    await callback_query.answer()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    user_data = await state.get_data()
    last_message_id = user_data.get('last_message_id')
    if last_message_id:
        await delete_message(callback_query.message.bot, callback_query.message.chat.id, last_message_id)

    if data == "crypto_BTC":
        crypto = "BTC"
    elif data == "crypto_LTC":
        crypto = "LTC"
    else:
        sent_message = await callback_query.message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await state.update_data(last_message_id=sent_message.message_id)
        return
    await state.update_data(crypto=crypto)
    sent_message = await callback_query.message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É:\n"
        "- –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.00041 BTC)\n"
        "- –ò–ª–∏ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 ‚ÇΩ)",
        reply_markup=cancel_inline_keyboard(callback_data="cancel_choose_crypto"),
    )
    await state.update_data(last_message_id=sent_message.message_id)
    await state.set_state(BuyCryptoStates.EnterAmount)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@user_router.message(BuyCryptoStates.EnterAmount)
async def enter_amount(message: Message, state: FSMContext):
    user_input = message.text.strip()
    user_data = await state.get_data()
    last_message_id = user_data.get('last_message_id')

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if last_message_id:
        await remove_buttons(message.bot, message.chat.id, last_message_id)

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º—ã –∏ –≤–∞–ª—é—Ç—ã
    match = re.match(r'^(\d+(\.\d+)?)\s*(BTC|LTC|‚ÇΩ)?$', user_input, re.IGNORECASE)
    if not match:
        sent_message = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.\n–ù–∞–ø—Ä–∏–º–µ—Ä: 0.00041 BTC –∏–ª–∏ 1000 ‚ÇΩ")
        await state.update_data(last_message_id=sent_message.message_id)
        return

    amount = float(match.group(1))
    currency = match.group(3).upper() if match.group(3) else None

    if amount <= 0:
        sent_message = await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        await state.update_data(last_message_id=sent_message.message_id)
        return

    user_data = await state.get_data()
    crypto = user_data.get('crypto', 'BTC')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é BTC, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∫ RUB
        crypto_rub_rate = await get_crypto_rate(crypto)
    except Exception:
        sent_message = await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.update_data(last_message_id=sent_message.message_id)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        result = await session.execute(
            select(Commission).order_by(Commission.id.desc())
        )
        commission_entry = result.scalar_one_or_none()
        if commission_entry:
            commission_rate = commission_entry.rate
        else:
            commission_rate = COMMISSION_RATE  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config.py

    commission_rate_percent = commission_rate / 100

    if currency == "‚ÇΩ":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Å—É–º–º—É –≤ RUB
        amount_rub = amount
        commission = amount_rub * commission_rate_percent
        amount_to_pay = amount_rub + commission  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –∫ —Å—É–º–º–µ –æ–ø–ª–∞—Ç—ã
        amount_crypto = amount_rub / crypto_rub_rate
        is_rub = True
    elif currency in ["BTC", "LTC"]:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Å—É–º–º—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
        amount_crypto = amount
        amount_rub_before_commission = amount_crypto * crypto_rub_rate
        commission = amount_rub_before_commission * commission_rate_percent
        amount_to_pay = amount_rub_before_commission + commission  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –∫ —Å—É–º–º–µ –æ–ø–ª–∞—Ç—ã
        amount_rub = amount_to_pay
        is_rub = False
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –≤–∞–ª—é—Ç—É, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ä—É–±–ª–∏, –µ—Å–ª–∏ —Å—É–º–º–∞ >=1
        if amount >= 1:
            amount_rub = amount
            commission = amount_rub * commission_rate_percent
            amount_to_pay = amount_rub + commission
            amount_crypto = amount_rub / crypto_rub_rate
            is_rub = True
        else:
            amount_crypto = amount
            amount_rub_before_commission = amount_crypto * crypto_rub_rate
            commission = amount_rub_before_commission * commission_rate_percent
            amount_to_pay = amount_rub_before_commission + commission
            amount_rub = amount_to_pay
            is_rub = False

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        amount_crypto=amount_crypto,
        amount_rub=amount_rub,
        commission=commission,
        amount_to_pay=amount_to_pay,
        crypto_rub_rate=crypto_rub_rate,
        is_rub=is_rub,
    )

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = (
        f"üí∞ **–í—ã –ø–æ–ª—É—á–∏—Ç–µ:** `{amount_crypto:.8f} {crypto}`\n"
        f"üíµ **–ö –æ–ø–ª–∞—Ç–µ:** `{amount_to_pay:.2f} ‚ÇΩ`"
    )

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
    try:
        payment_methods = await get_payment_methods()
    except Exception:
        sent_message = await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.update_data(last_message_id=sent_message.message_id)
        return

    sent_message = await message.answer(
        f"{message_text}\n\nüîó **–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:**",
        reply_markup=payment_methods_inline_keyboard(payment_methods),
        parse_mode="Markdown"
    )

    await state.set_state(BuyCryptoStates.ChoosePaymentMethod)
    await state.update_data(last_message_id=sent_message.message_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
async def get_payment_methods():
    async with async_session() as session:
        result = await session.execute(select(PaymentDetails.bank_name).distinct())
        methods = [row[0] for row in result.fetchall()]
        return methods

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
def payment_methods_inline_keyboard(methods):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=method, callback_data=f"payment_method_{method.replace(' ', '_')}")]
            for method in methods
        ]
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.inline_keyboard.append(
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel_choose_crypto")]
    )
    return keyboard

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@user_router.callback_query(BuyCryptoStates.ChoosePaymentMethod)
async def choose_payment_method_callback(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data
    await callback_query.answer()

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_data = await state.get_data()
    last_message_id = user_data.get('last_message_id')
    if last_message_id:
        await remove_buttons(callback_query.message.bot, callback_query.message.chat.id, last_message_id)

    if data.startswith("payment_method_"):
        payment_method = data[len("payment_method_"):].replace('_', ' ')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–µ–Ω
        payment_methods = await get_payment_methods()
        if payment_method not in payment_methods:
            sent_message = await callback_query.message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞.")
            await state.update_data(last_message_id=sent_message.message_id)
            return
    elif data == "cancel_choose_crypto":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        await buy_crypto_start(callback_query.message, state)
        return
    else:
        sent_message = await callback_query.message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await state.update_data(last_message_id=sent_message.message_id)
        return

    await state.update_data(payment_method=payment_method)
    user_data = await state.get_data()
    amount_to_pay = user_data['amount_to_pay']
    crypto = user_data['crypto']
    sent_message = await callback_query.message.answer(
        f"üîë –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è `{user_data['amount_crypto']:.8f} {crypto}`\n"
        f"üñ• –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ `{crypto}` –∫–æ—à–µ–ª—å–∫–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞:",
        reply_markup=cancel_inline_keyboard(callback_data="cancel_choose_payment_method"),
        parse_mode="Markdown"
    )
    await state.update_data(last_message_id=sent_message.message_id)
    await state.set_state(BuyCryptoStates.EnterWalletAddress)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
@user_router.message(BuyCryptoStates.EnterWalletAddress)
async def enter_wallet_address(message: Message, state: FSMContext):
    wallet_address = message.text.strip()
    user_data = await state.get_data()
    last_message_id = user_data.get('last_message_id')

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if last_message_id:
        await remove_buttons(message.bot, message.chat.id, last_message_id)

    crypto = user_data['crypto']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
    if not validate_wallet_address(wallet_address, crypto):
        sent_message = await message.answer(
            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π `{crypto}` –∞–¥—Ä–µ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=cancel_inline_keyboard(callback_data="cancel_enter_wallet_address_error"),
            parse_mode="Markdown"
        )
        await state.update_data(last_message_id=sent_message.message_id)
        return

    await state.update_data(wallet_address=wallet_address)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–ª–∞—Ç—ã
    payment_method = user_data['payment_method']
    payment_details = await get_payment_details(payment_method)
    amount_to_pay = user_data['amount_to_pay']

    if not payment_details:
        sent_message = await message.answer("‚ö†Ô∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.update_data(last_message_id=sent_message.message_id)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º payment_details –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(payment_details=payment_details)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    payment_message = (
        f"üè¶ **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n\n"
        f"**–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—å:** {payment_details['bank_name']}\n"
        f"**–§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:** {payment_details['recipient_name']}\n"
        f"**–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:** `{payment_details['card_number']}`\n"
        f"üíµ **–ö –æ–ø–ª–∞—Ç–µ:** `{amount_to_pay:.2f} ‚ÇΩ`"
    )

    sent_message = await message.answer(
        payment_message,
        reply_markup=payment_confirmation_inline_keyboard(),
        parse_mode="Markdown"
    )
    await state.update_data(last_message_id=sent_message.message_id)
    await state.set_state(BuyCryptoStates.ConfirmPayment)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
def validate_wallet_address(address, crypto):
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    patterns = {
        "BTC": r'^(1|3|bc1)[a-zA-Z0-9]{25,39}$',
        "LTC": r'^(L|M|ltc1)[a-zA-Z0-9]{25,39}$',
    }
    pattern = patterns.get(crypto)
    if not pattern:
        return False
    return re.match(pattern, address) is not None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã
async def get_payment_details(payment_method):
    async with async_session() as session:
        result = await session.execute(
            select(PaymentDetails).where(PaymentDetails.bank_name == payment_method)
        )
        payment_detail = result.scalar_one_or_none()
        if payment_detail:
            return {
                'bank_name': payment_detail.bank_name,
                'card_number': payment_detail.card_number,
                'recipient_name': payment_detail.recipient_name,
            }
        else:
            return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
def payment_confirmation_inline_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏–ª", callback_data="payment_confirmed"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="payment_cancelled"),
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel_enter_wallet_address")
        ]
    ])
    return keyboard

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏–ª"
@user_router.callback_query(F.data == "payment_confirmed")
async def payment_confirmed(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    user_data = await state.get_data()
    amount_to_pay = user_data['amount_to_pay']
    payment_details = user_data['payment_details']
    bank_name = payment_details['bank_name']
    card_number = payment_details['card_number']
    recipient_name = payment_details['recipient_name']

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    last_message_id = user_data.get('last_message_id')
    if last_message_id:
        await remove_buttons(callback_query.message.bot, callback_query.message.chat.id, last_message_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ú–æ—Å–∫–≤—ã
    moscow_tz = ZoneInfo('Europe/Moscow')
    current_time = datetime.now(moscow_tz).strftime('%H:%M')

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_message_text = (
        f"‚úÖ **–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞:** `{amount_to_pay:.2f} ‚ÇΩ` –≤ {current_time} –ø–æ –ú–°–ö\n\n"
        f"**üè¶ –ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—å:** {bank_name}\n"
        f"**–§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:** {recipient_name}\n"
        f"**–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:** `{card_number}`\n\n"
        f"üì© **–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.**\n"
        f"–í —Å–ª—É—á–∞–µ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )

    # –ö–Ω–æ–ø–∫–∞ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    contact_admin_inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url=f"https://t.me/{ADMIN_USERNAME}")
        ]
    ])

    sent_message = await callback_query.message.answer(
        new_message_text,
        reply_markup=contact_admin_inline_keyboard,
        parse_mode="Markdown"
    )
    await state.update_data(last_message_id=sent_message.message_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await confirm_payment(callback_query.message, state)

    await state.clear()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è"
@user_router.callback_query(F.data == "payment_cancelled")
async def payment_cancelled(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_data = await state.get_data()
    last_message_id = user_data.get('last_message_id')
    if last_message_id:
        await remove_buttons(callback_query.message.bot, callback_query.message.chat.id, last_message_id)

    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    cancellation_message = (
        "‚ùóÔ∏è **–û—Ç–∫–∞–∑ –æ—Ç –æ–ø–ª–∞—Ç—ã**\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å.\n"
        "–ü—Ä–∏ —á–∞—Å—Ç—ã—Ö –æ—Ç–º–µ–Ω–∞—Ö –∑–∞—è–≤–æ–∫ –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω."
    )
    sent_message = await callback_query.message.answer(cancellation_message)
    await state.update_data(last_message_id=sent_message.message_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await main_menu(callback_query.message, state)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.set_state(CaptchaStates.MainMenu)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞
async def confirm_payment(message: Message, state: FSMContext):
    user_data = await state.get_data()
    crypto = user_data['crypto']
    payment_method = user_data['payment_method']
    wallet_address = user_data['wallet_address']
    amount_to_pay = user_data['amount_to_pay']
    amount_crypto = user_data['amount_crypto']
    crypto_rub_rate = user_data['crypto_rub_rate']
    telegram_id = message.chat.id

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        if not user:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(telegram_id=telegram_id, first_name=message.from_user.first_name, username=message.from_user.username)
            session.add(user)
            try:
                await session.commit()
            except Exception:
                await session.rollback()
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
                return

        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        application = Application(
            user_id=user.id,
            crypto_type=crypto,
            amount=Decimal(amount_crypto),
            amount_rub=Decimal(amount_to_pay),
            crypto_rub_rate=Decimal(crypto_rub_rate),
            wallet_address=wallet_address,
            payment_method=payment_method,
            status='pending',
            created_at=datetime.utcnow(),
            updated_at=datetime.utcnow(),
        )
        session.add(application)
        try:
            await session.commit()
        except Exception:
            await session.rollback()
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ—Ä–∫–µ—Ä–∞
        await notify_worker(application)

    await message.answer("üì© –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\nüïí –í —Å—Ä–µ–¥–Ω–µ–º –¥–æ 15 –º–∏–Ω—É—Ç.")
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
async def notify_worker(application):
    bot = Bot(token=BOT_TOKEN)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É
        result = await session.execute(
            select(User).where(User.id == application.user_id)
        )
        user = result.scalar_one_or_none()
        if user is None:
            username = "Unknown"
            total_apps = 0
            successful_apps = 0
        else:
            username = user.first_name or user.username or f"User {user.telegram_id}"
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –∏ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            total_apps_result = await session.execute(
                select(func.count(Application.id)).where(Application.user_id == user.id)
            )
            total_apps = total_apps_result.scalar()
            successful_apps_result = await session.execute(
                select(func.count(Application.id)).where(
                    Application.user_id == user.id,
                    Application.status == 'completed'
                )
            )
            successful_apps = successful_apps_result.scalar()

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–ª–∞—Ç—ã
    payment_details = await get_payment_details(application.payment_method)
    card_number = payment_details['card_number'] if payment_details else 'Unknown'
    recipient_name = payment_details['recipient_name'] if payment_details else 'Unknown'

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown
    message_text = (
        f"üìÑ **–ó–∞—è–≤–∫–∞ ‚Ññ{application.id}**\n\n"
        f"**üë§ –ò–º—è:** {username}\n"
        f"**üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫:** {total_apps}\\{successful_apps}\n"
        f"**üí∞ –°—É–º–º–∞:** `{application.amount:.8f} {application.crypto_type}`\n"
        f"**üí≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª:** `{application.amount_rub:.2f} ‚ÇΩ`\n"
        f"**üè¶ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:** {application.payment_method}\n"
        f"**üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:** `{card_number}`\n"
        f"**üìù –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:** {recipient_name}\n\n"
        f"**üîë –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:**\n"
        f"`{application.wallet_address}`"
    )

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"application_{application.id}_completed"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"application_{application.id}_rejected"),
        ],
        [
            InlineKeyboardButton(text="üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"application_{application.id}_block_user"),
        ]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown
    await bot.send_message(
        WORKER_ID,
        message_text,
        reply_markup=inline_kb,
        parse_mode="Markdown"
    )
    await bot.close()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
@user_router.callback_query(F.data.startswith('application_') & F.data.endswith('_completed'))
async def application_completed_callback(callback_query: CallbackQuery):
    data = callback_query.data
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏
    try:
        parts = data.split('_')
        application_id = int(parts[1])
    except (IndexError, ValueError):
        await callback_query.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏.", show_alert=True)
        return
    await process_application_action(callback_query, application_id, 'completed')

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–∞–∑–∞—Ç—å"
@user_router.callback_query(F.data.startswith('application_') & F.data.endswith('_rejected'))
async def application_rejected_callback(callback_query: CallbackQuery):
    data = callback_query.data
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏
    try:
        parts = data.split('_')
        application_id = int(parts[1])
    except (IndexError, ValueError):
        await callback_query.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏.", show_alert=True)
        return
    await process_application_action(callback_query, application_id, 'rejected')

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
@user_router.callback_query(F.data.startswith('application_') & F.data.endswith('_block_user'))
async def block_user_callback(callback_query: CallbackQuery):
    data = callback_query.data
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏
    try:
        parts = data.split('_')
        application_id = int(parts[1])
    except (IndexError, ValueError):
        await callback_query.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏.", show_alert=True)
        return
    await block_user_action(callback_query, application_id)

async def process_application_action(callback_query: CallbackQuery, application_id: int, action: str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤–æ—Ä–∫–µ—Ä
    if callback_query.from_user.id != WORKER_ID:
        await callback_query.answer("‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        return

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        result = await session.execute(
            select(Application).where(Application.id == application_id)
        )
        application = result.scalar_one_or_none()
        if not application:
            await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        application.status = action
        application.updated_at = datetime.utcnow()
        try:
            await session.commit()
        except Exception:
            await session.rollback()
            await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.", show_alert=True)
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await notify_user(application, action)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if action == 'completed' else "‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ"
        await callback_query.message.edit_text(
            f"üìÑ **–ó–∞—è–≤–∫–∞ ‚Ññ{application.id}** –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.\n**–°—Ç–∞—Ç—É—Å:** {status_text}",
            parse_mode="Markdown"
        )
        await callback_query.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.", show_alert=True)

async def notify_user(application: Application, action: str):
    bot = Bot(token=BOT_TOKEN)
    # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with async_session() as session:
        result = await session.execute(
            select(User).where(User.id == application.user_id)
        )
        user = result.scalar_one_or_none()

    if user:
        if action == 'completed':
            message_text = f"‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.** –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
        elif action == 'rejected':
            message_text = f"‚ùå **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è."
        else:
            message_text = f"‚ÑπÔ∏è **–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ ‚Ññ{application.id}:** {action}"

        try:
            await bot.send_message(
                user.telegram_id,
                message_text,
                parse_mode="Markdown"
            )
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await bot.close()

async def block_user_action(callback_query: CallbackQuery, application_id: int):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤–æ—Ä–∫–µ—Ä
    if callback_query.from_user.id != WORKER_ID:
        await callback_query.answer("‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        return

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        result = await session.execute(
            select(Application).where(Application.id == application_id)
        )
        application = result.scalar_one_or_none()
        if not application:
            await callback_query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.id == application.user_id)
        )
        user = result.scalar_one_or_none()
        if not user:
            await callback_query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.is_blocked = True
        try:
            await session.commit()
        except Exception:
            await session.rollback()
            await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
            return

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        blocked_message = (
            f"üö´ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name or user.username or user.telegram_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.**"
        )
        await callback_query.message.edit_text(blocked_message, parse_mode="Markdown")
        await callback_query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def personal_account(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    user_data = await state.get_data()
    last_message_id = user_data.get('last_message_id')

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    if last_message_id:
        await delete_message(message.bot, message.chat.id, last_message_id)

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        if not user:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(telegram_id=telegram_id, first_name=message.from_user.first_name, username=message.from_user.username)
            session.add(user)
            try:
                await session.commit()
            except Exception:
                await session.rollback()
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
                return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats_result = await session.execute(
            select(
                func.count(Application.id).label("total_exchanges"),
                func.coalesce(func.sum(Application.amount_rub), 0).label("total_amount")
            ).where(Application.user_id == user.id)
        )
        stats = stats_result.fetchone()
        total_exchanges = stats.total_exchanges
        total_amount = stats.total_amount

        if total_exchanges == 0:
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –æ–±–º–µ–Ω–æ–≤
            profile_message = (
                "üìä **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
                "–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –æ–±–º–µ–Ω–æ–≤."
            )
            sent_message = await message.answer(
                profile_message,
                parse_mode="Markdown",
                reply_markup=main_menu_inline_keyboard()
            )
            await state.update_data(last_message_id=sent_message.message_id)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±–º–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏ –∫—É—Ä—Å–∞
        last_exchange_result = await session.execute(
            select(Application).where(Application.user_id == user.id).order_by(Application.created_at.desc()).limit(1)
        )
        last_exchange = last_exchange_result.scalar_one_or_none()

        if last_exchange:
            last_wallet = last_exchange.wallet_address
            last_crypto = last_exchange.crypto_type
            last_rate = f"{last_exchange.crypto_rub_rate:.4f} ‚ÇΩ/{last_crypto}"
        else:
            last_wallet = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            last_crypto = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            last_rate = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        total_amount_formatted = f"{total_amount:.2f} ‚ÇΩ"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        profile_message = (
            f"üìä **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
            f"**üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–º–µ–Ω–æ–≤:** {total_exchanges}\n"
            f"**üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–æ–≤:** {total_amount_formatted}\n"
            f"**üîë –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫:** `{last_wallet}`\n"
            f"**üí± –ü–æ—Å–ª–µ–¥–Ω—è—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:** {last_crypto}\n"
            f"**üìâ –ö—É—Ä—Å –æ–±–º–µ–Ω–∞:** {last_rate}"
        )

        sent_message = await message.answer(
            profile_message,
            parse_mode="Markdown",
            reply_markup=main_menu_inline_keyboard()
        )
        await state.update_data(last_message_id=sent_message.message_id)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–û—Ç–º–µ–Ω–∞" –∏ "–ù–∞–∑–∞–¥"
@user_router.callback_query(lambda c: c.data and c.data.startswith('cancel_'))
async def cancel_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    user_data = await state.get_data()
    last_message_id = user_data.get('last_message_id')
    if last_message_id:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        await delete_message(callback_query.message.bot, callback_query.message.chat.id, last_message_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await main_menu(callback_query.message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@user_router.message()
async def unexpected_message_handler(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.text.startswith('/') and telegram_id in ADMIN_IDS:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º
        return
    # –ò–Ω–∞—á–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
    await main_menu(message, state)
